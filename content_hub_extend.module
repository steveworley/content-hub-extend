<?php
/**
* @file
* Extends the functionality provided by the Content Hub module.
*/

use Drupal\content_hub_extend as content_hub_extend;

/**
 * Implements hook_init().
 */
function content_hub_extend_init() {
  $autoload = dirname(__FILE__) . '/vendor/autoload.php';
  if (!class_exists('Drupal\content_hub_extend\Security') && file_exists($autoload)) {
    require_once $autoload;
  }
}

/**
 * Implements hook_menu().
 */
function content_hub_extend_menu() {
  $items = array();

  // Dynamically generate content hub source edit URLs.
  module_load_include('inc', 'content_hub_connector', 'content_hub_connector.entityconfig');

  foreach (_content_hub_connector_get_entity_types() as $type => $bundle) {
    $info = entity_get_info($type);

    if ($info['uri callback'] == 'eck__entity__uri' || !is_callable($info['uri callback'])) {
      continue;
    }

    $entity = (object) array(
      $info['entity keys']['id'] => content_hub_extend\Uri::ENTITY_ID
    );
    $uri = $info['uri callback']($entity);

    $edit_uri = new content_hub_extend\Uri($uri['path'], $type);
    $edit_uri = $edit_uri->resolve();

    $items[$edit_uri['path']] = array(
      'title' => 'Edit Source',
      'page callback' => 'content_hub_extend_source_edit',
      'page arguments' => $edit_uri['args']['page'],
      'access callback' => array('content_hub_extend_access'),
      'access arguments' => $edit_uri['args']['access'],
      'load arguments' => $edit_uri['args']['load'],
      'type' => MENU_LOCAL_TASK,
      'weight' => 5,
      'file' => 'content_hub_extend.pages.inc',
    );
  }

  return $items;
}

/**
 * Load an entity for the URL.
 *
 * @param $entity_id
 *   The entity id that is being loaded.
 * @param $entity_type
 *   The entity type that is being loaded.
 *
 * @return object
 */
function content_hub_extend_load($entity_id, $entity_type) {
  $entities = entity_load($entity_type, array($entity_id));
  return reset($entities);
}

/**
 * Check access for the currently viewed entity.
 *
 * @param $permission
 *   A permission string to check against.
 * @param $entity_type
 *   The entity type for the given $entity.
 * @param $entity
 *   The entity.
 *
 * @return bool
 */
function content_hub_extend_access($permission, $entity_type, $entity) {
  content_hub_extend_init();
  $origin = variable_get('content_hub_connector_origin');

  $security = new content_hub_extend\Security();
  return user_access($permission) && $security->accessCheck($entity_type, $entity, $origin);
}